{"version":3,"sources":["globalStyles.js","ui/AppWrapper.js","ui/TimeDisplay.js","ui/ControlPanel.js","ui/Button.js","stopwatch.js","components/Display.jsx","hooks/useCounter.js","components/Panel.jsx","hooks/useStatus.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","AppWrapper","styled","div","TimeDisplay","time","ControlPanel","Button","button","waiting","subject","BehaviorSubject","Stopwatch","getValue","count","next","asObservable","Display","useState","setCount","useEffect","subscriber","subscribe","unsubscribe","useCounter","formatTime","Date","toISOString","substr","Panel","waitBtn","useRef","status","setStatus","sub","timer","_","newStatus","useStatus","changeStatus","isStop","isPause","fromEvent","current","pipe","throttleTime","asyncScheduler","leading","trailing","onClick","ref","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sbAEO,IAAMA,EAAcC,YAAH,K,+MCAjB,IAAMC,EAAaC,IAAOC,IAAV,K,sSCAhB,IAAMC,EAAcF,IAAOG,KAAV,K,qLCAjB,IAAMC,EAAeJ,IAAOC,IAAV,K,+RCAlB,IAAMI,EAASL,IAAOM,OAAV,KAWf,qBAAGC,SAAqB,kB,QCVtBC,EAAU,I,MAAIC,GAAgB,GAEvBC,EACQ,kBAAMF,EAAQG,YADtBD,EAEC,SAACE,GAAD,OAAWJ,EAAQK,KAAKD,IAFzBF,EAGG,kBAAMF,EAAQK,KAAK,IAHtBH,EAIF,kBAAMF,EAAQM,gBCLlB,SAASC,IACd,IAAMH,ECFD,WAAuB,IAAD,EACDI,mBAAS,GADR,mBACpBJ,EADoB,KACbK,EADa,KAS3B,OANAC,qBAAU,WACR,IAAMC,EAAaT,IAAoBU,UAAUH,GAEjD,OAAO,kBAAME,EAAWE,iBACvB,IAEIT,EDPOU,GACRC,EAAa,IAAIC,KAAa,IAARZ,GAAca,cAAcC,OAAO,GAAI,GAEnE,OAAO,cAACxB,EAAD,UAAcqB,I,wCEFhB,SAASI,IACd,IAAMC,EAAUC,iBAAO,MADD,ECFjB,WAAsB,IAAD,EACEb,mBAAS,QADX,mBACnBc,EADmB,KACXC,EADW,KA4B1B,OAzBAb,qBAAU,WACR,IAEMc,EAFYC,YAAM,EAAG,KAELb,WAAU,SAACc,GAC/B,OAAQJ,GACN,IAAK,QACH,OAAOpB,EAAqBA,IAAgC,GAC9D,IAAK,OACH,OAAOA,IACT,IAAK,QACH,OACF,IAAK,QAGH,OAFAA,SACAqB,EAAU,SAEZ,QACE,WAIN,OAAO,kBAAMC,EAAIX,iBAChB,CAACS,IAIG,CAACA,EAFa,SAACK,GAAD,OAAeJ,EAAUI,KDrBfC,GAHT,mBAGfN,EAHe,KAGPO,EAHO,KAKhBC,EAAoB,SAAXR,EACTS,EAAqB,UAAXT,EAehB,OAbAZ,qBAAU,WACR,IAOMC,EAPUqB,YAAUZ,EAAQa,QAAS,YAAYC,KACrDC,YAAa,IAAKC,IAAgB,CAChCC,SAAS,EACTC,UAAU,KAIa1B,WAAU,kBAAMiB,EAAa,YAExD,OAAO,kBAAMlB,EAAWE,iBACvB,IAGD,eAACjB,EAAD,WACGkC,GAAUC,EACT,cAAClC,EAAD,CAAQ0C,QAAS,kBAAMV,EAAa,UAApC,mBAEA,cAAChC,EAAD,CAAQ0C,QAAS,kBAAMV,EAAa,SAApC,kBAEF,cAAChC,EAAD,CAAQ2C,IAAKpB,EAASrB,QAASgC,EAA/B,kBAGA,cAAClC,EAAD,CAAQ0C,QAAS,kBAAMV,EAAa,UAApC,sBEjCC,SAASY,IACd,OACE,qCACE,cAACpD,EAAD,IACA,eAACE,EAAD,WACE,cAACgB,EAAD,IACA,cAACY,EAAD,UCNRuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACH,EAAD,MAEFI,SAASC,eAAe,W","file":"static/js/main.3b940f75.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n  \n  html {\n    font-size: 16px;\n  }\n  \n  html, body {\n    height: 100%;\n  }\n  \n  #root {\n    height: 100vh;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const AppWrapper = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 0 1.5rem;\n`;\n","import styled from \"styled-components\";\n\nexport const TimeDisplay = styled.time`\n  width: 100%;\n  height: 10rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-family: \"Roboto\", sans-serif;\n  font-size: 2.5rem;\n  font-weight: 100;\n  color: #333;\n  user-select: none;\n`;\n","import styled from \"styled-components\";\n\nexport const ControlPanel = styled.div`\n  width: 100%;\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: center;\n  align-items: center;\n`;\n","import styled from \"styled-components\";\n\nexport const Button = styled.button`\n  margin: 0.5rem;\n  padding: 0.5rem 2.25rem;\n  border: none;\n  border-radius: 0.5rem;\n  font-family: \"Roboto\", sans-serif;\n  font-size: 1rem;\n  background: #333;\n  color: white;\n  cursor: pointer;\n\n  ${({ waiting }) => waiting && `opacity: 0.5`};\n`;\n","import { BehaviorSubject, interval, Subject } from \"rxjs\";\nimport { map, scan } from \"rxjs/operators\";\n\nconst subject = new BehaviorSubject(0);\n\nexport const Stopwatch = {\n  getCurrentCounter: () => subject.getValue(),\n  setCounter: (count) => subject.next(count),\n  resetCounter: () => subject.next(0),\n  onCount: () => subject.asObservable(),\n};\n","import React from \"react\";\nimport { TimeDisplay } from \"../ui\";\nimport { useCounter } from \"../hooks/useCounter\";\n\nexport function Display() {\n  const count = useCounter();\n  const formatTime = new Date(count * 1000).toISOString().substr(11, 8);\n\n  return <TimeDisplay>{formatTime}</TimeDisplay>;\n}\n","import { useState, useEffect } from \"react\";\nimport { Stopwatch } from \"../stopwatch\";\n\nexport function useCounter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const subscriber = Stopwatch.onCount().subscribe(setCount);\n\n    return () => subscriber.unsubscribe();\n  }, []);\n\n  return count;\n}\n","import { useEffect, useRef } from \"react\";\nimport { Button, ControlPanel } from \"../ui\";\nimport { useStatus } from \"../hooks/useStatus\";\nimport { asyncScheduler, fromEvent } from \"rxjs\";\nimport { throttleTime } from \"rxjs/operators\";\n\nexport function Panel() {\n  const waitBtn = useRef(null);\n\n  const [status, changeStatus] = useStatus();\n\n  const isStop = status === \"stop\";\n  const isPause = status === \"pause\";\n\n  useEffect(() => {\n    const button$ = fromEvent(waitBtn.current, \"dblclick\").pipe(\n      throttleTime(300, asyncScheduler, {\n        leading: false,\n        trailing: true,\n      })\n    );\n\n    const subscriber = button$.subscribe(() => changeStatus(\"pause\"));\n\n    return () => subscriber.unsubscribe();\n  }, []);\n\n  return (\n    <ControlPanel>\n      {isStop || isPause ? (\n        <Button onClick={() => changeStatus(\"start\")}>Start</Button>\n      ) : (\n        <Button onClick={() => changeStatus(\"stop\")}>Stop</Button>\n      )}\n      <Button ref={waitBtn} waiting={isPause}>\n        Wait\n      </Button>\n      <Button onClick={() => changeStatus(\"reset\")}>Reset</Button>\n    </ControlPanel>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { Stopwatch } from \"../stopwatch\";\nimport { timer } from \"rxjs\";\n\nexport function useStatus() {\n  const [status, setStatus] = useState(\"stop\");\n\n  useEffect(() => {\n    const interval$ = timer(0, 1000);\n\n    const sub = interval$.subscribe((_) => {\n      switch (status) {\n        case \"start\":\n          return Stopwatch.setCounter(Stopwatch.getCurrentCounter() + 1);\n        case \"stop\":\n          return Stopwatch.resetCounter();\n        case \"pause\":\n          return;\n        case \"reset\":\n          Stopwatch.resetCounter();\n          setStatus(\"start\");\n          return;\n        default:\n          return;\n      }\n    });\n\n    return () => sub.unsubscribe();\n  }, [status]);\n\n  const changeStatus = (newStatus) => setStatus(newStatus);\n\n  return [status, changeStatus];\n}\n","import { GlobalStyle } from \"./globalStyles\";\nimport { AppWrapper } from \"./ui\";\nimport { Display, Panel } from \"./components\";\n\nexport function App() {\n  return (\n    <>\n      <GlobalStyle />\n      <AppWrapper>\n        <Display />\n        <Panel />\n      </AppWrapper>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}